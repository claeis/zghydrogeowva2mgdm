group 'ch.interlis'
apply plugin: "java"
apply plugin: "maven"

sourceCompatibility = "1.8" 
targetCompatibility = "1.8"

version '1.0.0'+System.getProperty('release','-SNAPSHOT')

configurations {
    deployerJars
}

// to get the latest SNAPSHOT uncomment the following lines
//configurations.all {
    // check for updates every build
    // resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
//}

dependencies {
    compile group: 'ch.ehi', name: 'ehibasics', version: '1.3.0'
    compile group: 'ch.interlis', name: 'iox-ili', version: '1.21.4+'
    compile group: 'ch.interlis', name: 'ili2c-tool', version: "5.1.4"
    compile group: 'ch.interlis', name: 'ili2c-core', version: "5.1.4"
    testCompile group: 'junit', name: 'junit', version: '4.12'
    deployerJars "org.apache.maven.wagon:wagon-ftp:3.3.3"
    deployerJars "org.apache.maven.wagon:wagon-ssh:3.3.3"
}

repositories {
	mavenLocal()
	mavenCentral()
    maven {
        url "http://jars.interlis.ch"
    }
}

Properties properties = new Properties()
File propFile=project.rootProject.file('user.properties')
if(propFile.exists()){
	properties.load(propFile.newDataInputStream())
}
def git = System.getProperty('git',properties.get('git','git'))
def repos_pwd = System.getProperty('repos_pwd',properties.get('repos_pwd','repos_pwd'))
def repos_usr = System.getProperty('repos_usr',properties.get('repos_usr','repos_usr'))

def generatedResources = "$buildDir/generated-resources/main"

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine git, 'rev-parse', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

sourceSets {
    main {
    	output.dir(generatedResources, builtBy: 'generateMyResources')
    }
}

task generateMyResources {
	doLast {
		def versionProps = new Properties()
		versionProps.setProperty('version', "$project.version")
		versionProps.setProperty('versionCommit', getGitHash())
		def versionPropsFile = new File(generatedResources,"ch/ehi/zg/hydrogeowva2mgdm/Version.properties")
		versionPropsFile.getParentFile().mkdirs();
		versionProps.store(versionPropsFile.newWriter(), null);
	}
}

task bindist(type: Zip){
	baseName = project.name
	destinationDir = file('dist')
	from jar
	into('libs'){
		from configurations.runtimeClasspath
		//def jars=[]
		//subprojects.each {
        //	jars+=it.libsDir
        //}
        //from jars
	}
	// version = '1.0.6'
}

jar {
  manifest {
    attributes(
      "Main-Class": "ch.ehi.zg.hydrogeowva2mgdm.Main",
      "Class-Path": configurations.runtimeClasspath.collect { 'libs/'+it.getName() }.join(' '))
  }
}

artifacts {
	archives(bindist.archivePath) {
        type 'zip'
        classifier 'bindist'
        builtBy bindist
    }
    archives(jar.archivePath){
    	builtBy jar
    }
}

test {
    testLogging.exceptionFormat = 'full'
}

uploadArchives {
    repositories {
        mavenDeployer {
        	configuration = configurations.deployerJars
			repository(url: 'ftp://ftp.umleditor.org'){
            	authentication(userName: repos_usr, password: repos_pwd)
            }
        }
    }
}

